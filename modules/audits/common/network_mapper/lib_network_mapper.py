from modules.audits.base_model import BaseTest
from scapy import *
import socket
from subprocess import check_output, CalledProcessError
#from config import CURR_SYSTEM_PLATFORM
import json

class NetworkMapper:  # (BaseTest):

    #   ICMP echo request packets also known as ping packets 
    #   are used to identify nodes that are connected to a network 
    #   Possible approach -
    #   get the base ip xxx.xxx.xxx.000/<CIDR Value>
    #   send echo request to each possible ip address (256 in total)
    #   with sppofed sender ip as xxx.xxx.xxx.1 (router/ origin node ip)
    #   check echo reply for the status of the node
    #   this mapper will use the ip values generated by the general system information

    """
        MO -
        1. fetch all up ip using ping scan
        2. send arp packets to all up ips
        3. scan all ports that are open on up ips
    """

    def __init__(self, network_info: dict = None):
        super().__init__()
        self.connected_nodes_in_network = []
        self.connected_nodes_to_machine = []
        self.connected_nodes_in_network_info = {}
        self.connected_nodes_to_machine_info = {}
        self.all_possible_ips = {}
        self.system_network = {}
        self.network_info = network_info
        self.test_results = {}

    def send_ping_packet(self):
        for interface in self.system_network.keys():
            all_possible_ips = self.system_network[interface]["all_possible_ips"]
            for ip in all_possible_ips:
                output = ""
                try:
                    #if CURR_SYSTEM_PLATFORM == "linux":
                    output = check_output(["ping", "-c", "3", ip])
                    # elif CURR_SYSTEM_PLATFORM == "windows":
                    #    output = check_output(["ping", "-n", "3", ip])
                except CalledProcessError:
                    continue

                output = output.decode("utf-8")
                if "100% packet loss" not in output:
                    self.system_network[interface]["connected_nodes"].append(ip)

    def send_arp_packet(self):
        pass

    def scan_ports(self):
        socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        for interface in self.system_network.keys():
            socket_obj.bind((interface, 0))
            for ip in interface["connected_nodes"]:
                self.system_network[interface]["Open_Port_Analysis"][ip] = []
                for port in (1, 65535):
                    result = socket_obj.connect_ex((ip, port))
                    if result == 0:
                        self.system_network[interface]["Open_Port_Analysis"][ip].append(port)
            socket_obj.close()

    @staticmethod
    def calculate_all_ips(ip):
        all_ips = []
        for i in range(1, 256):
            temp_ip = ip[:ip.rfind(".")] + "." + str(i)
            all_ips.append(temp_ip)
        return all_ips

    @staticmethod
    def calculate_cidr_value(netmask):
        netmask = netmask
        cidr_value = 0

        if netmask is None:
            return "0.0.0.0"

        for octet in netmask.split('.'):

            if octet == '255':
                cidr_value += 8

            else:
                converted_bin_value = bin(int(octet))
                number_of_filled_bytes = str(converted_bin_value).count('1')
                cidr_value += number_of_filled_bytes

        return cidr_value

    def process_system_network_info(self):
        for interface, interface_details in self.network_info.items():
            try:
                ip = interface_details["IP_Address"]
            except KeyError:
                continue

            if ip == "127.0.0.1":
                continue
            else:
                self.system_network[interface] = {}

                self.system_network[interface].update(
                    curr_system_ip=ip,
                    netmask=interface_details["Netmask"],
                    cidr_value=self.calculate_cidr_value(interface_details["Netmask"]),
                    all_possible_ips=self.calculate_all_ips(ip),
                    connected_nodes=[],
                    open_port_analysis={}
                )

    def run_test(self):
        self.process_system_network_info()
        self.send_ping_packet()
        self.scan_ports()
        print(json.dumps(self.system_network))


if __name__ == "__main__":

    Network_Information =  {
                "lo": {
                        "IP_Address": "127.0.0.1",
                        "Netmask": None,
                        "Broadcast_IP": None,
                        "MAC_Address": "00:00:00:00:00:00",
                        "Broadcast_MAC": None
                    },
                "wlo1": {
                        "IP_Address": "192.168.1.3",
                        "Netmask": None,
                        "Broadcast_IP": "192.168.1.255",
                        "MAC_Address": "7c:5c:f8:c6:18:d5",
                        "Broadcast_MAC": "ff:ff:ff:ff:ff:ff"
                    },
                "enp8s0": {
                        "MAC_Address": "fc:3f:db:b4:12:5b",
                        "Netmask": None,
                        "Broadcast_MAC": "ff:ff:ff:ff:ff:ff"
                    },
                    "Total Bytes Sent (Since Boot)": "591.16MB",
                    "Total Bytes Received (Since Boot)": "13.55GB"
        }

    obj = NetworkMapper(network_info=Network_Information)
    obj.run_test()